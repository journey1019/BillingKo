import { convertUTCToKST } from '@/utils/time';
import { Switch } from '@mui/material';
import dayjs from 'dayjs';

// ‚úÖ ÏÖÄ ÎÇ¥Î∂ÄÏóê Ïò§Î•∏Ï™Ω ÌÖåÎëêÎ¶¨ (Í∞í Î†åÎçîÎßÅ + tailwind class ÏÇ¨Ïö©)
export const renderDivisionCell = ({ cell }) => (
    <div>
        {/*<div className="border-r-2 border-gray-300 pr-2">*/}
        {cell.getValue() ? cell.getValue().toLocaleString?.() ?? cell.getValue() : ''}
    </div>
);

// ‚úÖ ÌÖåÏù¥Î∏î Ìó§Îçî/Î∞îÎîîÏóê Ïä§ÌÉÄÏùº Ï†ÅÏö©
export const applyRightDivisionStyles = () => ({
    muiTableHeadCellProps: {
        sx: {
            borderRight: '2px solid rgba(0, 0, 0, 0.1)',
            whiteSpace: 'nowrap',
        },
    },
    muiTableBodyCellProps: {
        sx: {
            borderRight: '2px solid rgba(0, 0, 0, 0.1)',
            // textAlign: 'right',
        },
    },
});

// ‚úÖ Ïà´Ïûê (Ïò§Î•∏Ï™Ω Ï†ïÎ†¨)
export const renderNumberCell = ({ cell }) => (
    <div className="text-right font-bold pr-3">{cell.getValue().toLocaleString()}</div>
);
export const renderNumberCellUnder = ({ cell }) => (
    <div className="text-right font-bold underline pr-3">{cell.getValue().toLocaleString()}</div>
);
export const renderNumberCellNotBold = ({ cell }) => (
    <div className="text-right pr-3">{cell.getValue().toLocaleString()}</div>
);
// ‚úÖ Ïà´Ïûê (Ìó§Îçî Ïò§Î•∏Ï™Ω Ï†ïÎ†¨)
export const applyRightAlignStyles = () => ({
    muiTableHeadCellProps: {
        sx: {
            '& .Mui-TableHeadCell-Content': {
                justifyContent: "flex-end !important",
                textAlign: "right !important",
                whiteSpace: "wrap"
            },
            borderRight: '2px solid rgba(0, 0, 0, 0.1)',
            whiteSpace: 'nowrap',
        }
    },
    muiTableBodyCellProps: {
        sx: {
            textAlign: "right",
            borderRight: '2px solid rgba(0, 0, 0, 0.1)',
        }
    }
});

// ‚úÖ Î≤ÑÌäº (Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨)
export const renderButtonCell = ({ cell }) => (
    <div className="text-center font-bold pr-3">{cell.getValue().toLocaleString()}</div>
);
// ‚úÖ Î≤ÑÌäº (Ìó§Îçî Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨)
export const applyCenterAlignStyles = () => ({
    muiTableHeadCellProps: {
        sx: {
            '& .Mui-TableHeadCell-Content': {
                justifyContent: "center", // ‚úÖ Ïò¨Î∞îÎ•∏ Í∞í
                textAlign: "center",
                whiteSpace: "nowrap", // ‚úÖ ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (wrap ‚Üí nowrap)
            },
        },
    },
    muiTableBodyCellProps: {
        sx: {
            textAlign: "center",
            justifyContent: "center", // ‚úÖ ÌïÑÏöî Ïãú Ï†ÅÏö©
            alignItems: "center", // ‚úÖ ÏàòÏßÅ Ï†ïÎ†¨ÎèÑ ÌïÑÏöîÌïòÎ©¥ Ï∂îÍ∞Ä
        },
    },
});


// ‚úÖ ÌôîÎ©¥ Ï∂úÎ†• Ïãú UTC ‚Üí KST Î°ú Î≥ÄÌôòÌï¥ÏÑú Î≥¥Ïó¨Ï£ºÍ∏∞
// export const formatDateTimeUTCtoKST = ({ cell }) => {
//     const value = cell.getValue();
//     return convertUTCToKST(value);
// };
// üí° editedUsersÎ•º Ïô∏Î∂ÄÏóêÏÑú Ï£ºÏûÖÌï† Ïàò ÏûàÎèÑÎ°ù Îß§Í∞úÎ≥ÄÏàòÌôî
export const getFormatDateTimeUTCtoKST = (editedUsers) => {
    return ({ cell, row }) => {
        const acct_num = row.original.acct_num;
        const edited = editedUsers?.[acct_num]?.confirm_payment_date;
        const rawValue = edited ?? cell.getValue();
        return convertUTCToKST(rawValue);
    };
};


export const useYNSwitch = ({ cell }) => {
    const value = cell.getValue() || '';
    return(
        <div className="text-center m-0">
            <Switch
                checked={value === 'Y'}
                disabled
                color="primary"
                size="small"
            />
        </div>
    )
}


export const renderUseConfirmYN = ({ cell }) => {
    const value = cell.getValue() || '';
    const label = value === 'Y' ? 'ÏôÑÎÇ©' : value === 'P' ? 'Î∂ÄÎ∂ÑÎÇ©' : 'ÎØ∏ÎÇ©';
    const color = value === 'Y' ? '#53d571' : value === 'P' ? '#ffd147' : '#e46774';
    return(
        <div className="text-center m-0">
            <span
                style={{
                    color: color,
                    backgroundColor: 'white',
                    padding: '4px 8px',
                    borderWidth: 0.5,
                    borderColor: color,
                    borderRadius: '8px',
                    fontSize: '0.8rem',
                    fontWeight: 600,
                }}
            >
                {label}
            </span>
        </div>
    )
}

export const renderPaymentMethod = ({ cell }) => {
    const value = cell.getValue() || '';
    const label = value === 'giro' ? 'ÏßÄÎ°ú' : value === 'account' ? 'ÏùÄÌñâ' : '';
    const color = value === 'giro' ? '#5a2eea' : value === 'account' ? '#ea9f2e' : '#8e8e8e';
    return(
        <div className="text-center m-0">
            <span
                style={{
                    color: color,
                    backgroundColor: 'white',
                    padding: '4px 8px',
                    borderWidth: 0.5,
                    borderColor: color,
                    borderRadius: '8px',
                    fontSize: '0.8rem',
                    fontWeight: 600,
                }}
            >
                    {label}
                </span>
        </div>
    )
}

/**
 * ÎÇ†Ïßú Î¨∏ÏûêÏó¥ÏùÑ 'YYYY-MM-DDTHH:mm:ss' -> 'YYYY-MM-DD' ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
 * @param {string | Date | null | undefined} value
 * @returns {string} Î≥ÄÌôòÎêú ÎÇ†Ïßú Î¨∏ÏûêÏó¥, Î≥ÄÌôò Î∂àÍ∞ÄÏãú Îπà Î¨∏ÏûêÏó¥
 */
export const formatDateToYMD = (value) => {
    if (!value) return '';

    const parsed = dayjs(value);
    if (!parsed.isValid()) return '';

    return parsed.format('YYYY-MM-DD');
};