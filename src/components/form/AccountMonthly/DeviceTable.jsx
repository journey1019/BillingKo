import React, { useState } from "react";
import { MaterialReactTable } from "material-react-table";
import { formatNumber } from "@/utils/formatHelpers";
import { FaChevronDown, FaChevronRight } from "react-icons/fa";

const DeviceTable = ({ accountData }) => {
    const [expandedRows, setExpandedRows] = useState({});

    // ‚úÖ accountDataÍ∞Ä Î∞∞Ïó¥Ïù∏ÏßÄ ÌôïÏù∏ ÌõÑ Ï≤òÎ¶¨
    const safeAccountData = Array.isArray(accountData) ? accountData : [];

    // ‚úÖ Ïû•Ïπò Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
    const tableData = safeAccountData.flatMap((account) =>
        (account.device_detail || []).map((device) => ({
            ...device,
            acct_num: account.acct_num, // Í≥ÑÏ†ï Ï†ïÎ≥¥ Ï∂îÍ∞Ä
            adjustment_info: (account.adjustment_info || []).filter(
                (adj) => adj.serial_number === device.serial_number || adj.account_num === account.acct_num
            ),
            none_pay_info: account.none_pay_info || [],
        }))
    );

    // ‚úÖ Ìñâ ÌÅ¥Î¶≠ Ïãú ÌôïÏû• ÏÉÅÌÉú ÌÜ†Í∏Ä Ìï®Ïàò
    const toggleRowExpansion = (serialNumber) => {
        setExpandedRows((prev) => ({
            ...prev,
            [serialNumber]: !prev[serialNumber],
        }));
    };

    // ‚úÖ ÌÖåÏù¥Î∏î Ïª¨Îüº Ï†ïÏùò
    const columns = [
        {
            accessorKey: "serial_number",
            header: "Îã®ÎßêÍ∏∞ Î≤àÌò∏",
            size: 120,
            Cell: ({ row }) => (
                <div
                    className="flex items-center cursor-pointer"
                    onClick={() => toggleRowExpansion(row.original.serial_number)}
                >
                    {expandedRows[row.original.serial_number] ? (
                        <FaChevronDown className="text-gray-600 mr-2" />
                    ) : (
                        <FaChevronRight className="text-gray-600 mr-2" />
                    )}
                    {row.original.serial_number}
                </div>
            ),
        },
        { accessorKey: "period_data", header: "ÏÇ¨Ïö© Í∏∞Í∞Ñ", size: 80 },
        { accessorKey: "basic_fee", header: "Í∏∞Î≥∏ ÏöîÍ∏à", size: 100, Cell: ({ cell }) => formatNumber(cell.getValue()) + " Ïõê" },
        { accessorKey: "subscribe_fee", header: "Í∞ÄÏûÖÎπÑ", size: 100, Cell: ({ cell }) => formatNumber(cell.getValue()) + " Ïõê" },
        { accessorKey: "add_use_fee", header: "Ï∂îÍ∞Ä ÏÇ¨Ïö©Î£å", size: 100, Cell: ({ cell }) => formatNumber(cell.getValue()) + " Ïõê" },
        { accessorKey: "total_fee", header: "Ï¥ù ÏöîÍ∏à", size: 120, Cell: ({ cell }) => formatNumber(cell.getValue()) + " Ïõê" },
    ];

    return (
        <div className="bg-white p-4 shadow-md rounded-lg">
            <MaterialReactTable
                columns={columns}
                data={tableData}
                enableRowActions
                getRowProps={({ row }) => ({
                    onClick: () => toggleRowExpansion(row.original.serial_number),
                    style: { cursor: "pointer" },
                })}
                renderDetailPanel={({ row }) => {
                    const { adjustment_info, none_pay_info } = row.original;
                    return (
                        <div className="p-4 bg-gray-100 rounded-lg">
                            {/* ‚úÖ Ï°∞Ï†ï ÎÇ¥Ïó≠ */}
                            {adjustment_info.length > 0 && (
                                <div className="mb-3">
                                    <h3 className="text-sm font-semibold mb-2 text-gray-800">üìå Ï°∞Ï†ï ÎÇ¥Ïó≠</h3>
                                    <div className="overflow-x-auto border rounded-md">
                                        <table className="w-full text-sm text-center">
                                            <thead className="bg-gray-200">
                                            <tr>
                                                {["Ï°∞Ï†ï Ïú†Ìòï", "ÏÑ§Î™Ö", "Ï°∞Ï†ï Í∏àÏï°"].map((header, index) => (
                                                    <th key={index} className="p-2 border">{header}</th>
                                                ))}
                                            </tr>
                                            </thead>
                                            <tbody>
                                            {adjustment_info.map((adj, index) => (
                                                <tr key={index} className="text-center">
                                                    <td className="p-2 border">{adj.mount_type}</td>
                                                    <td className="p-2 border">{adj.description}</td>
                                                    <td className="p-2 border">{formatNumber(adj.adjustment_fee)} Ïõê</td>
                                                </tr>
                                            ))}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            )}

                            {/* ‚úÖ ÎØ∏ÎÇ© ÎÇ¥Ïó≠ */}
                            {none_pay_info.length > 0 && (
                                <div>
                                    <h3 className="text-sm font-semibold mb-2 text-gray-800">üìå ÎØ∏ÎÇ© ÎÇ¥Ïó≠</h3>
                                    <div className="overflow-x-auto border rounded-md">
                                        <table className="w-full text-sm text-center">
                                            <thead className="bg-gray-200">
                                            <tr>
                                                {["ÎØ∏ÎÇ© Í∏àÏï°", "Ï∂îÍ∞Ä Ïù¥Ïûê", "ÎØ∏ÎÇ© Í∏∞Í∞Ñ"].map((header, index) => (
                                                    <th key={index} className="p-2 border">{header}</th>
                                                ))}
                                            </tr>
                                            </thead>
                                            <tbody>
                                            {none_pay_info.map((np, index) => (
                                                <tr key={index} className="text-center">
                                                    <td className="p-2 border">{formatNumber(np.none_paid_fee)} Ïõê</td>
                                                    <td className="p-2 border">{np.add_percent}%</td>
                                                    <td className="p-2 border">{np.none_paid_period} Í∞úÏõî</td>
                                                </tr>
                                            ))}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            )}

                            {adjustment_info.length === 0 && none_pay_info.length === 0 && (
                                <p className="text-gray-500">üìå Í¥ÄÎ†® Ï°∞Ï†ï ÎÇ¥Ïó≠ Î∞è ÎØ∏ÎÇ© ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
                            )}
                        </div>
                    );
                }}
            />
        </div>
    );
};

export default DeviceTable;
